//===-- H2BLBAsmPrinter.cpp - H2BLB LLVM assembly writer ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file contains a printer that converts from our internal representation
// of machine-dependent LLVM code to the H2BLB assembly language.
//
//===----------------------------------------------------------------------===//

#include "H2BLB.h"
#include "H2BLBInstrInfo.h"
#include "H2BLBTargetMachine.h"
#include "MCTargetDesc/H2BLBInstPrinter.h"
#include "TargetInfo/H2BLBTargetInfo.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineInstr.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCStreamer.h"
#include "llvm/MC/MCSymbol.h"
#include "llvm/MC/TargetRegistry.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "asm-printer"

namespace {
class H2BLBAsmPrinter : public AsmPrinter {
public:
  explicit H2BLBAsmPrinter(TargetMachine &TM,
                           std::unique_ptr<MCStreamer> Streamer)
      : AsmPrinter(TM, std::move(Streamer)) {}

  StringRef getPassName() const override { return "H2BLB Assembly Printer"; }

  void emitInstruction(const MachineInstr *MI) override;
};
} // end anonymous namespace.

/// Returns true if MO translates to an MCOperand.
/// When false is returned, this means that no MCOperand needs to
/// be produced for this MO (e.g., for an implicit MO.)
static bool lowerOperand(const MachineOperand &MO, MCOperand &MCO) {
  switch (MO.getType()) {
  default:
    llvm_unreachable("unknown operand type");
  case MachineOperand::MO_Register:
    // Ignore all implicit register operands.
    if (MO.isImplicit())
      return false;
    MCO = MCOperand::createReg(MO.getReg());
    break;
  case MachineOperand::MO_RegisterMask:
    // Regmasks are like implicit defs.
    return false;
  case MachineOperand::MO_Immediate:
    MCO = MCOperand::createImm(MO.getImm());
    break;
  case MachineOperand::MO_MachineBasicBlock:
  case MachineOperand::MO_GlobalAddress:
  case MachineOperand::MO_ExternalSymbol:
  case MachineOperand::MO_MCSymbol:
  case MachineOperand::MO_JumpTableIndex:
  case MachineOperand::MO_ConstantPoolIndex:
  case MachineOperand::MO_BlockAddress:
    llvm_unreachable("not yet implemented");
  }
  return true;
}

/// Translate a MachineInstr to a MCInst.
static MCInst MachineInstrToMCInst(const MachineInstr &MI) {
  MCInst TmpInst;
  TmpInst.setOpcode(MI.getOpcode());

  for (const MachineOperand &MO : MI.operands()) {
    MCOperand MCOp;
    if (lowerOperand(MO, MCOp))
      TmpInst.addOperand(MCOp);
  }
  return TmpInst;
}

void H2BLBAsmPrinter::emitInstruction(const MachineInstr *MI) {
  // This function is autogenerated as part of the InstrInfo TableGen backend.
  H2BLB_MC::verifyInstructionPredicates(MI->getOpcode(),
                                        getSubtargetInfo().getFeatureBits());

  MCInst TmpInst = MachineInstrToMCInst(*MI);
  EmitToStreamer(*OutStreamer, TmpInst);
}

// Register the AsmPrinter in the H2BLB target for other tools to find
// it (like Clang.)
extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeH2BLBAsmPrinter() {
  RegisterAsmPrinter<H2BLBAsmPrinter> Tmp(getTheH2BLBTarget());
}
