; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc  -o - %s -fast-isel=0 --stop-after=finalize-isel -verify-machineinstrs | FileCheck %s
target triple="h2blb--"

define void @empty() {
  ; CHECK-LABEL: name: empty
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0
  ret void
}

; Check that we directly select the non-pseudo instruction
; when the immediate is in the [0,127] range.
define i16 @retCstInRange() {
  ; CHECK-LABEL: name: retCstInRange
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[LD16imm7_:%[0-9]+]]:gpr16 = LD16imm7 11
  ; CHECK-NEXT:   $r1 = COPY [[LD16imm7_]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  ret i16 11
}

; Check that we select the pseudo instruction for out-of-range
; constants. The pseudo instruction will need to be fixed
; eventually.
define i16 @retCst() {
  ; CHECK-LABEL: name: retCst
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[LD16imm16_:%[0-9]+]]:gpr16 = LD16imm16 132
  ; CHECK-NEXT:   $r1 = COPY [[LD16imm16_]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  ret i16 132
}

define i16 @oneArgi16(i16 %arg) {
  ; CHECK-LABEL: name: oneArgi16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  ret i16 %arg
}

define half @oneArgHalf(half %arg) {
  ; CHECK-LABEL: name: oneArgHalf
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  ret half %arg
}

define i32 @oneArgi32(i32 %arg) {
  ; CHECK-LABEL: name: oneArgi32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $d1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr32 = COPY $d1
  ; CHECK-NEXT:   $d1 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $d1
  ret i32 %arg
}

define <2 x i16> @oneArgv2i16(<2 x i16> %arg) {
  ; CHECK-LABEL: name: oneArgv2i16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r2, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY2]]
  ; CHECK-NEXT:   $r2 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1, implicit $r2
  ret <2 x i16> %arg
}

define <2 x i16> @twoArgsi16(i16 %arg, i16 %arg1) {
  ; CHECK-LABEL: name: twoArgsi16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r2, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY2]]
  ; CHECK-NEXT:   $r2 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1, implicit $r2
  %partial = insertelement <2 x i16> poison, i16 %arg, i32 0
  %res = insertelement <2 x i16> %partial, i16 %arg1, i32 1
  ret <2 x i16> %res
}

; The fourth i16 argument is expected to be passed through a stack slot.
define i16 @fourArgsi16(i16 %arg, i16 %arg1, i16 %arg2, i16 %arg3) {
  ; CHECK-LABEL: name: fourArgsi16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[LDRSP16_:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.0, 0 :: (load (s16) from %fixed-stack.0, align 8)
  ; CHECK-NEXT:   $r1 = COPY [[LDRSP16_]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  ret i16 %arg3
}

; Check that we properly set r1 as the input argument for the call.
define i16 @callAFctWithOneArg(i16 %arg) {
  ; CHECK-LABEL: name: callAFctWithOneArg
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   $r1 = COPY [[COPY1]]
  ; CHECK-NEXT:   CALL @oneArgi16, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY2]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %res = call i16 @oneArgi16(i16 %arg)
  ret i16 %res
}

declare i16 @arg16_32(i16, i32)

; Check that we set r1 and d1 as the input argument for the call.
define i16 @callAFctWithArg16_32(i16 %arg, i32 %arg1) {
  ; CHECK-LABEL: name: callAFctWithArg16_32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $d1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr32 = COPY $d1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   $r1 = COPY [[COPY2]]
  ; CHECK-NEXT:   $d1 = COPY [[COPY1]]
  ; CHECK-NEXT:   CALL @arg16_32, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit $d1, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY3]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %res = call i16 @arg16_32(i16 %arg, i32 %arg1)
  ret i16 %res
}

declare i16 @arg16_16(i16, i16)

; Check that we swap the input arg r1, r2 to r2, r1 to match the
; desired argument sequence.
define i16 @callAFctWithTwoI16Arg(i16 %arg, i16 %arg1) {
  ; CHECK-LABEL: name: callAFctWithTwoI16Arg
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r2, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   $r1 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r2 = COPY [[COPY2]]
  ; CHECK-NEXT:   CALL @arg16_16, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit $r2, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY3]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %res = call i16 @arg16_16(i16 %arg1, i16 %arg)
  ret i16 %res
}

declare i16 @lotsOfArgs2(i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16)

; Check that we duplicate %arg on as many stack slots as
; required to call lotsOfArgs1.
define i16 @foo1(i16 %arg) {
  ; CHECK-LABEL: name: foo1
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 14 :: (store (s16) into stack + 14)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 12 :: (store (s16) into stack + 12)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 10 :: (store (s16) into stack + 10)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 8 :: (store (s16) into stack + 8)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 6 :: (store (s16) into stack + 6)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 4 :: (store (s16) into stack + 4)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 2 :: (store (s16) into stack + 2)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 0 :: (store (s16) into stack)
  ; CHECK-NEXT:   $r1 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r2 = COPY [[COPY1]]
  ; CHECK-NEXT:   $r3 = COPY [[COPY1]]
  ; CHECK-NEXT:   CALL @lotsOfArgs1, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   $r1 = COPY [[COPY2]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
   %res = call i16 @lotsOfArgs1(i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg, i16 %arg)
   ret i16 %res
}

; Stress test for the stack lowering.
define i16 @lotsOfArgs1(i16 %a1, i16 %a2, i16 %a3, i16 %a4, i16 %a5, i16 %a6, i16 %a7, i16 %a8, i16 %a9, i16 %a10, i16 %a11) {
  ; CHECK-LABEL: name: lotsOfArgs1
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r2, $r3, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[LDRSP16_:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.0, 0 :: (load (s16) from %fixed-stack.0)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_]], $sp, 14 :: (store (s16) into stack + 14)
  ; CHECK-NEXT:   [[LDRSP16_1:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.1, 0 :: (load (s16) from %fixed-stack.1, align 4)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_1]], $sp, 12 :: (store (s16) into stack + 12)
  ; CHECK-NEXT:   [[LDRSP16_2:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.2, 0 :: (load (s16) from %fixed-stack.2)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_2]], $sp, 10 :: (store (s16) into stack + 10)
  ; CHECK-NEXT:   [[LDRSP16_3:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.3, 0 :: (load (s16) from %fixed-stack.3, align 8)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_3]], $sp, 8 :: (store (s16) into stack + 8)
  ; CHECK-NEXT:   [[LDRSP16_4:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.4, 0 :: (load (s16) from %fixed-stack.4)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_4]], $sp, 6 :: (store (s16) into stack + 6)
  ; CHECK-NEXT:   [[LDRSP16_5:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.5, 0 :: (load (s16) from %fixed-stack.5, align 4)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_5]], $sp, 4 :: (store (s16) into stack + 4)
  ; CHECK-NEXT:   [[LDRSP16_6:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.6, 0 :: (load (s16) from %fixed-stack.6)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_6]], $sp, 2 :: (store (s16) into stack + 2)
  ; CHECK-NEXT:   [[LDRSP16_7:%[0-9]+]]:gpr16 = LDRSP16 %fixed-stack.7, 0 :: (load (s16) from %fixed-stack.7, align 8)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_7]], $sp, 0 :: (store (s16) into stack)
  ; CHECK-NEXT:   $r1 = COPY [[COPY3]]
  ; CHECK-NEXT:   $r2 = COPY [[COPY2]]
  ; CHECK-NEXT:   $r3 = COPY [[COPY1]]
  ; CHECK-NEXT:   CALL @lotsOfArgs2, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   STRSP16 [[COPY2]], $sp, 12 :: (store (s16) into stack + 12)
  ; CHECK-NEXT:   STRSP16 [[COPY1]], $sp, 10 :: (store (s16) into stack + 10)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_7]], $sp, 8 :: (store (s16) into stack + 8)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_6]], $sp, 6 :: (store (s16) into stack + 6)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_5]], $sp, 4 :: (store (s16) into stack + 4)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_4]], $sp, 2 :: (store (s16) into stack + 2)
  ; CHECK-NEXT:   STRSP16 [[LDRSP16_3]], $sp, 0 :: (store (s16) into stack)
  ; CHECK-NEXT:   STRSP16 [[COPY3]], $sp, 14 :: (store (s16) into stack + 14)
  ; CHECK-NEXT:   $r1 = COPY [[LDRSP16_]]
  ; CHECK-NEXT:   $r2 = COPY [[LDRSP16_1]]
  ; CHECK-NEXT:   $r3 = COPY [[LDRSP16_2]]
  ; CHECK-NEXT:   CALL @lotsOfArgs2, csr, implicit-def dead $r0, implicit $sp, implicit $r1, implicit $r2, implicit $r3, implicit-def $sp, implicit-def $r1
  ; CHECK-NEXT:   ADJCALLSTACKUP 16, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   [[ADDi16rr:%[0-9]+]]:gpr16 = ADDi16rr [[COPY3]], [[COPY4]]
  ; CHECK-NEXT:   [[ADDi16rr1:%[0-9]+]]:gpr16 = ADDi16rr [[LDRSP16_1]], killed [[ADDi16rr]]
  ; CHECK-NEXT:   [[ADDi16rr2:%[0-9]+]]:gpr16 = ADDi16rr killed [[ADDi16rr1]], [[COPY5]]
  ; CHECK-NEXT:   $r1 = COPY [[ADDi16rr2]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %tmp = call i16 @lotsOfArgs2(i16 %a1, i16 %a2, i16 %a3, i16 %a4, i16 %a5, i16 %a6, i16 %a7, i16 %a8, i16 %a9, i16 %a10, i16 %a11)
  %tmp0 = call i16 @lotsOfArgs2(i16 %a11, i16 %a10, i16 %a9, i16 %a8, i16 %a7, i16 %a6, i16 %a5, i16 %a4, i16 %a3, i16 %a2, i16 %a1)
  %tmp1 = add i16 %a1, %tmp
  %tmp2 = add i16 %a10, %tmp1
  %res = add i16 %tmp2, %tmp0
  ret i16 %res
}
