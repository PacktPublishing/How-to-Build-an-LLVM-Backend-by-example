# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -run-pass=legalizer %s -o - -mtriple=h2blb | FileCheck %s
# Check that all the instructions involved in address computation are
# legal.
# Namely this covers:
# - p0 G_PTR_ADD
# - 16|32-bit G_LOAD
# - 16|32-bit G_STORE
# - p0 FRAME_INDEX
# - 16|32-bit G_CONSTANT
---
name: cst16
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r0

    ; CHECK-LABEL: name: cst16
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 11
    ; CHECK-NEXT: $r1 = COPY [[C]](s16)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $r1
    %0:_(s16) = G_CONSTANT i16 11
    $r1 = COPY %0(s16)
    RETURN implicit $r0, implicit $r1

...
---
name: cst32
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r0

    ; CHECK-LABEL: name: cst32
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 132
    ; CHECK-NEXT: $r1 = COPY [[C]](s16)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $r1
    %0:_(s16) = G_CONSTANT i16 132
    $r1 = COPY %0(s16)
    RETURN implicit $r0, implicit $r1

...
---
name: ld16_frame_index
tracksRegLiveness: true
fixedStack:
  - { id: 0, size: 2, alignment: 8, isImmutable: true }
body:             |
  bb.1:
    liveins: $r1, $r0

    ; CHECK-LABEL: name: ld16_frame_index
    ; CHECK: liveins: $r1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s16))
    ; CHECK-NEXT: $r1 = COPY [[LOAD]](s16)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $r1
    %4:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %3:_(s16) = G_LOAD %4(p0) :: (invariant load (s16))
    $r1 = COPY %3(s16)
    RETURN implicit $r0, implicit $r1

...
---
name: ld32_frame_index
tracksRegLiveness: true
fixedStack:
  - { id: 0, size: 4, alignment: 8, isImmutable: true }
body:             |
  bb.1:
    liveins: $r1, $r0

    ; CHECK-LABEL: name: ld32_frame_index
    ; CHECK: liveins: $r1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (invariant load (s32))
    ; CHECK-NEXT: $d1 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $d1
    %4:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %3:_(s32) = G_LOAD %4(p0) :: (invariant load (s32))
    $d1 = COPY %3(s32)
    RETURN implicit $r0, implicit $d1

...
---
name: ptrAdd_str
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r1, $r0

    ; CHECK-LABEL: name: ptrAdd_str
    ; CHECK: liveins: $r1, $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s16) = COPY $r1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $sp
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 0
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C]](s16)
    ; CHECK-NEXT: G_STORE [[COPY]](s16), [[PTR_ADD]](p0) :: (store (s16), align 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: G_STORE [[C1]](s32), [[PTR_ADD]](p0) :: (store (s32), align 1)
    ; CHECK-NEXT: RETURN implicit $r0
    %0:_(s16) = COPY $r1
    %2:_(p0) = COPY $sp
    %3:_(s16) = G_CONSTANT i16 0
    %4:_(p0) = G_PTR_ADD %2, %3(s16)
    G_STORE %0(s16), %4(p0) :: (store (s16), align 1)
    %5:_(s32) = G_CONSTANT i32 12
    G_STORE %5(s32), %4(p0) :: (store (s32), align 1)
    RETURN implicit $r0
...
---
name: implicitDef
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r0

    ; CHECK-LABEL: name: implicitDef
    ; CHECK: liveins: $r0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: $d1 = COPY [[DEF]](s32)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $d1
    %0:_(s32) = G_IMPLICIT_DEF
    $d1 = COPY %0
    RETURN implicit $r0, implicit $d1

...
