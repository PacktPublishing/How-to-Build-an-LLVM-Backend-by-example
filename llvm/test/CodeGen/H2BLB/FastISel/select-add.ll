; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc  -o - %s -fast-isel -fast-isel-abort=3 --stop-after=finalize-isel | FileCheck %s
target triple="h2blb--"

define i16 @addi16(i16 %a, i16 %b) {
  ; CHECK-LABEL: name: addi16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r2, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:gpr16 = COPY killed [[COPY2]]
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:gpr16 = COPY killed [[COPY1]]
  ; CHECK-NEXT:   [[ADDi16rr:%[0-9]+]]:gpr16 = ADDi16rr [[COPY3]], [[COPY4]]
  ; CHECK-NEXT:   $r1 = COPY [[ADDi16rr]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %res = add i16 %a, %b
  ret i16 %res
}

; In this test, FastISel uses the pseudo instruction LD16imm16 because the
; target specific LD16imm7 uses a predicate that FastISel cannot import.
define i16 @addi16Imm(i16 %a) {
  ; CHECK-LABEL: name: addi16Imm
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gpr16 = COPY killed [[COPY1]]
  ; CHECK-NEXT:   [[LD16imm16_:%[0-9]+]]:gpr16 = LD16imm16 6
  ; CHECK-NEXT:   [[ADDi16rr:%[0-9]+]]:gpr16 = ADDi16rr [[COPY2]], [[LD16imm16_]]
  ; CHECK-NEXT:   $r1 = COPY [[ADDi16rr]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %res = add i16 %a, 6
  ret i16 %res
}
