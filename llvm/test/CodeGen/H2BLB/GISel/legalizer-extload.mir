# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -run-pass=legalizer %s -o - -mtriple=h2blb | FileCheck %s

---
name: legalAnyextendedLoad
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r0, $r1

    ; CHECK-LABEL: name: legalAnyextendedLoad
    ; CHECK: liveins: $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $r1
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $r1 = COPY [[LOAD]](s16)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $r1
    %0:_(p0) = COPY $r1
    %1:_(s16) = G_LOAD %0 :: (load(s8))
    $r1 = COPY %1(s16)
    RETURN implicit $r0, implicit $r1
...

# The lowering for any-extended load with a memory type that is illegal,
# consists in bumping it to the next byte size.
# In this test we can observe that s7 is bumped to s8.
---
name: lowerAnyextendedLoad
tracksRegLiveness: true
body:             |
  bb.1:
    liveins: $r0, $r1

    ; CHECK-LABEL: name: lowerAnyextendedLoad
    ; CHECK: liveins: $r0, $r1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $r1
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $r1 = COPY [[LOAD]](s16)
    ; CHECK-NEXT: RETURN implicit $r0, implicit $r1
    %0:_(p0) = COPY $r1
    %1:_(s16) = G_LOAD %0 :: (load(s7))
    $r1 = COPY %1(s16)
    RETURN implicit $r0, implicit $r1
...
