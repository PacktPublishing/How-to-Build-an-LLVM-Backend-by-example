; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -o - %s -fast-isel=0  -mtriple h2blb -stop-after=finalize-isel |FileCheck %s
; These tests are ISel-only until we implement the lowering of the stack.
; Indeed when we create allocas, we need to lower the related FrameIndex and
; create some space on the stack.

; We make the load volatile because otherwise SDISel optimize it away since it
; knows we are loading the value that we just stored.
define i16 @alloca16(i16 %val) {
  ; CHECK-LABEL: name: alloca16
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr16 = COPY $r1
  ; CHECK-NEXT:   STRSP16 [[COPY1]], %stack.0.ptr, 0 :: (store (s16) into %ir.ptr)
  ; CHECK-NEXT:   [[LDRSP16_:%[0-9]+]]:gpr16 = LDRSP16 %stack.0.ptr, 0 :: (volatile dereferenceable load (s16) from %ir.ptr)
  ; CHECK-NEXT:   $r1 = COPY [[LDRSP16_]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $r1
  %ptr = alloca i16
  store i16 %val, ptr %ptr
  %res = load volatile i16, ptr %ptr
  ret i16 %res
}

define i32 @alloca32(i32 %val) {
  ; CHECK-LABEL: name: alloca32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $d1, $r0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr16 = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr32 = COPY $d1
  ; CHECK-NEXT:   STRSP32 [[COPY1]], %stack.0.ptr, 0 :: (store (s32) into %ir.ptr)
  ; CHECK-NEXT:   [[LDRSP32_:%[0-9]+]]:gpr32 = LDRSP32 %stack.0.ptr, 0 :: (volatile dereferenceable load (s32) from %ir.ptr)
  ; CHECK-NEXT:   $d1 = COPY [[LDRSP32_]]
  ; CHECK-NEXT:   $r0 = COPY [[COPY]]
  ; CHECK-NEXT:   RETURN implicit $r0, implicit $d1
  %ptr = alloca i32
  store i32 %val, ptr %ptr
  %res = load volatile i32, ptr %ptr
  ret i32 %res
}
