; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple h2blb -o - %s | FileCheck %s

define i16 @loadi16(ptr %arg) {
; CHECK-LABEL: loadi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldr16 r1, r1, 0
; CHECK-NEXT:    ret
  %res = load i16, ptr %arg
  ret i16 %res
}

define i16 @loadi16PlusImm(ptr %arg) {
; CHECK-LABEL: loadi16PlusImm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldr16 r1, r1, 4
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 4
  %res = load i16, ptr %addr
  ret i16 %res
}

define i16 @loadi16PlusOffset(ptr %arg, i16 %offset) {
; CHECK-LABEL: loadi16PlusOffset:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi16 r1, r1, r2
; CHECK-NEXT:    ldr16 r1, r1, 0
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 %offset
  %res = load i16, ptr %addr
  ret i16 %res
}

define i32 @loadi32(ptr %arg) {
; CHECK-LABEL: loadi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldr32 d1, r1, 0
; CHECK-NEXT:    ret
  %res = load i32, ptr %arg
  ret i32 %res
}

define i32 @loadi32PlusImm(ptr %arg) {
; CHECK-LABEL: loadi32PlusImm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldr32 d1, r1, 12
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 12
  %res = load i32, ptr %addr
  ret i32 %res
}

; Check that we don't fold immediate that are too big to fit
; in the encoding space.
define i32 @loadi32PlusTooBigImm(ptr %arg) {
; CHECK-LABEL: loadi32PlusTooBigImm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldi16 r2, 27
; CHECK-NEXT:    addi16 r1, r1, r2
; CHECK-NEXT:    ldr32 d1, r1, 0
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 27
  %res = load i32, ptr %addr
  ret i32 %res
}

define i16 @sextload(ptr %arg) {
; CHECK-LABEL: sextload:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldrsext8 r1, r1, 0
; CHECK-NEXT:    ret
  %ld = load i8, ptr %arg
  %res = sext i8 %ld to i16
  ret i16 %res
}

define i16 @sextloadPlusImm(ptr %arg) {
; CHECK-LABEL: sextloadPlusImm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldrsext8 r1, r1, 3
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 3
  %ld = load i8, ptr %addr
  %res = sext i8 %ld to i16
  ret i16 %res
}

define i16 @sextloadPlusImmTooBig(ptr %arg) {
; CHECK-LABEL: sextloadPlusImmTooBig:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldi16 r2, 16
; CHECK-NEXT:    addi16 r1, r1, r2
; CHECK-NEXT:    ldrsext8 r1, r1, 0
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 16
  %ld = load i8, ptr %addr
  %res = sext i8 %ld to i16
  ret i16 %res
}

define i16 @zextload(ptr %arg) {
; CHECK-LABEL: zextload:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldrzext8 r1, r1, 0
; CHECK-NEXT:    ret
  %ld = load i8, ptr %arg
  %res = zext i8 %ld to i16
  ret i16 %res
}

define i16 @zextloadPlusImm(ptr %arg) {
; CHECK-LABEL: zextloadPlusImm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldrzext8 r1, r1, 3
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 3
  %ld = load i8, ptr %addr
  %res = zext i8 %ld to i16
  ret i16 %res
}

define i16 @zextloadPlusImmTooBig(ptr %arg) {
; CHECK-LABEL: zextloadPlusImmTooBig:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ldi16 r2, 16
; CHECK-NEXT:    addi16 r1, r1, r2
; CHECK-NEXT:    ldrzext8 r1, r1, 0
; CHECK-NEXT:    ret
  %addr = getelementptr i8, ptr %arg, i16 16
  %ld = load i8, ptr %addr
  %res = zext i8 %ld to i16
  ret i16 %res
}
