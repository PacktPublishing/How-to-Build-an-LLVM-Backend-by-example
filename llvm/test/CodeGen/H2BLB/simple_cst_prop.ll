; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -mtriple=h2blb -passes=h2blb-simple-cst-prop %s -S -o - | FileCheck %s
; RUN: opt -mtriple=h2blb -h2blb-simple-cst-prop --bugpoint-enable-legacy-pm %s -S -o - | FileCheck %s
; The command line for the legacy pass manager is likely going to be killed
; sooner than later. Here we abuse the bugpoint capabilities to get by.

; We should end up with the constant completely folded in the final phi.
; On one branch:
; (5 << 3) / 5 ==> 8
; On the other branch:
; (5 << 3) | 3855 ==> 3887
define i32 @foo(i32 noundef %arg) {
; CHECK-LABEL: define i32 @foo(
; CHECK-SAME: i32 noundef [[ARG:%.*]]) {
; CHECK-NEXT:  [[FOO_BB:.*:]]
; CHECK-NEXT:    [[I1:%.*]] = icmp ne i32 [[ARG]], 0
; CHECK-NEXT:    br i1 [[I1]], label %[[FOO_BB2:.*]], label %[[FOO_BB4:.*]]
; CHECK:       [[FOO_BB2]]:
; CHECK-NEXT:    br label %[[FOO_BB6:.*]]
; CHECK:       [[FOO_BB4]]:
; CHECK-NEXT:    br label %[[FOO_BB6]]
; CHECK:       [[FOO_BB6]]:
; CHECK-NEXT:    [[DOT0:%.*]] = phi i32 [ 8, %[[FOO_BB2]] ], [ 3887, %[[FOO_BB4]] ]
; CHECK-NEXT:    ret i32 [[DOT0]]
;
foo.bb:
  %i = shl i32 5, 3
  %i1 = icmp ne i32 %arg, 0
  br i1 %i1, label %foo.bb2, label %foo.bb4

foo.bb2:
  %i3 = sdiv i32 %i, 5
  br label %foo.bb6

foo.bb4:
  %i5 = or i32 %i, 3855
  br label %foo.bb6

foo.bb6:
  %.0 = phi i32 [ %i3, %foo.bb2 ], [ %i5, %foo.bb4 ]
  ret i32 %.0
}

; We should end up with the constant completely folded in the final phi.
; On one branch:
; (-1 << 3) /u 3 ==> 1431655762
; On the other branch:
; (-1 << 3) | 3855 ==> -1
define i32 @bar(i32 noundef %arg) {
; CHECK-LABEL: define i32 @bar(
; CHECK-SAME: i32 noundef [[ARG:%.*]]) {
; CHECK-NEXT:  [[BAR_BB:.*:]]
; CHECK-NEXT:    [[I1:%.*]] = icmp ne i32 [[ARG]], 0
; CHECK-NEXT:    br i1 [[I1]], label %[[BAR_BB2:.*]], label %[[BAR_BB4:.*]]
; CHECK:       [[BAR_BB2]]:
; CHECK-NEXT:    br label %[[BAR_BB6:.*]]
; CHECK:       [[BAR_BB4]]:
; CHECK-NEXT:    br label %[[BAR_BB6]]
; CHECK:       [[BAR_BB6]]:
; CHECK-NEXT:    [[DOT0:%.*]] = phi i32 [ 1431655762, %[[BAR_BB2]] ], [ -1, %[[BAR_BB4]] ]
; CHECK-NEXT:    [[I7:%.*]] = add i32 [[DOT0]], 1
; CHECK-NEXT:    ret i32 [[I7]]
;
bar.bb:
  %i = shl i32 -1, 3
  %i1 = icmp ne i32 %arg, 0
  br i1 %i1, label %bar.bb2, label %bar.bb4

bar.bb2:
  %i3 = udiv i32 %i, 3
  br label %bar.bb6

bar.bb4:
  %i5 = or i32 %i, 3855
  br label %bar.bb6

bar.bb6:
  %.0 = phi i32 [ %i3, %bar.bb2 ], [ %i5, %bar.bb4 ]
  %i7 = add i32 %.0, 1
  ret i32 %i7
}
